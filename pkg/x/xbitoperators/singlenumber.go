package xbitoperators
/*
SingleNumber 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

& 与运算 两个位都是 1 时，结果才为 1，否则为 0，如
  1 0 0 1 1
& 1 1 0 0 1
------------------------------
 1 0 0 0 1

| 或运算 两个位都是 0 时，结果才为 0，否则为 1，如
  1 0 0 1 1
| 1 1 0 0 1
------------------------------
  1 1 0 1 1

^ 异或运算，两个位相同则为 0，不同则为 1，如
  1 0 0 1 1
^ 1 1 0 0 1
-----------------------------
  0 1 0 1 0

~ 取反运算，0 则变为 1，1 则变为 0，如
~ 1 0 0 1 1
-----------------------------
  0 1 1 0 0

*/

func SingleNumber(data []int) int {
	res := 0
	for _, v := range data{
		res ^= v
	}
	return res
}